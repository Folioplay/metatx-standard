import React, { useState, useEffect } from "react";
import "../App.css";
import Button from "@material-ui/core/Button";
import {
    NotificationContainer,
    NotificationManager
} from "react-notifications";
import "react-notifications/lib/notifications.css";
import Backdrop from '@material-ui/core/Backdrop';
import CircularProgress from '@material-ui/core/CircularProgress';

import { ethers } from "ethers";
import { Biconomy } from "@biconomy/mexa";

import { makeStyles } from '@material-ui/core/styles';
import Link from '@material-ui/core/Link';
import Typography from '@material-ui/core/Typography';
import { Box } from "@material-ui/core";
let sigUtil = require("eth-sig-util");

let config = {
    contract: {
        // address: "0x853bfD0160d67DF13a9F70409f9038f6473585Bd", //kovan
        address: "0xc73b5Ddb8BC20fAD17aA73cAB64220Fc4E86190C", //mumbai
        abi: {
            "_format": "hh-sol-artifact-1",
            "contractName": "TestContract",
            "sourceName": "contracts/TestContract.sol",
            "abi": [
                {"inputs":[{"internalType":"string","name":"newQuote","type":"string"}],"name":"setQuote","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_forwarder","type":"address"}],"name":"setTrustedForwarder","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"getQuote","outputs":[{"internalType":"string","name":"currentQuote","type":"string"},{"internalType":"address","name":"currentOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"quote","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"trustedForwarder","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"versionRecipient","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},
                {
                    "anonymous": false,
                    "inputs": [
                        {
                            "indexed": false,
                            "internalType": "address",
                            "name": "userAddress",
                            "type": "address"
                        },
                        {
                            "indexed": false,
                            "internalType": "address",
                            "name": "relayerAddress",
                            "type": "address"
                        },
                        {
                            "indexed": false,
                            "internalType": "bytes",
                            "name": "functionSignature",
                            "type": "bytes"
                        }
                    ],
                    "name": "MetaTransactionExecuted",
                    "type": "event"
                },
                {
                    "inputs": [
                        {
                            "internalType": "string[]",
                            "name": "_crypto",
                            "type": "string[]"
                        }
                    ],
                    "name": "createOrder",
                    "outputs": [],
                    "stateMutability": "nonpayable",
                    "type": "function"
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "userAddress",
                            "type": "address"
                        },
                        {
                            "internalType": "bytes",
                            "name": "functionSignature",
                            "type": "bytes"
                        },
                        {
                            "internalType": "bytes32",
                            "name": "sigR",
                            "type": "bytes32"
                        },
                        {
                            "internalType": "bytes32",
                            "name": "sigS",
                            "type": "bytes32"
                        },
                        {
                            "internalType": "uint8",
                            "name": "sigV",
                            "type": "uint8"
                        }
                    ],
                    "name": "executeMetaTransaction",
                    "outputs": [
                        {
                            "internalType": "bytes",
                            "name": "",
                            "type": "bytes"
                        }
                    ],
                    "stateMutability": "payable",
                    "type": "function"
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "user",
                            "type": "address"
                        }
                    ],
                    "name": "getNonce",
                    "outputs": [
                        {
                            "internalType": "uint256",
                            "name": "nonce",
                            "type": "uint256"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "getQuote",
                    "outputs": [
                        {
                            "internalType": "string",
                            "name": "currentQuote",
                            "type": "string"
                        },
                        {
                            "internalType": "address",
                            "name": "currentOwner",
                            "type": "address"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [
                        {
                            "internalType": "uint256",
                            "name": "orderID",
                            "type": "uint256"
                        }
                    ],
                    "name": "getcrypto",
                    "outputs": [
                        {
                            "internalType": "string[]",
                            "name": "",
                            "type": "string[]"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "owner",
                    "outputs": [
                        {
                            "internalType": "address",
                            "name": "",
                            "type": "address"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "quote",
                    "outputs": [
                        {
                            "internalType": "string",
                            "name": "",
                            "type": "string"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [
                        {
                            "internalType": "string",
                            "name": "newQuote",
                            "type": "string"
                        }
                    ],
                    "name": "setQuote",
                    "outputs": [],
                    "stateMutability": "nonpayable",
                    "type": "function"
                },
                {
                    "inputs": [
                        {
                            "internalType": "address",
                            "name": "_tokenAddr",
                            "type": "address"
                        },
                        {
                            "internalType": "address payable",
                            "name": "_receiver",
                            "type": "address"
                        },
                        {
                            "internalType": "uint256",
                            "name": "_amt",
                            "type": "uint256"
                        }
                    ],
                    "name": "transfer",
                    "outputs": [],
                    "stateMutability": "nonpayable",
                    "type": "function"
                }
            ],
            "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280600c81526020017f54657374436f6e747261637400000000000000000000000000000000000000008152506040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081816040518060800160405280604f815260200162001dd2604f9139805190602001208280519060200120828051906020012030620000c26200010160201b60201c565b60001b604051602001620000db9594939291906200012b565b6040516020818303038152906040528051906020012060008190555050505050620001c6565b600046905090565b620001148162000188565b82525050565b62000125816200019c565b82525050565b600060a0820190506200014260008301886200011a565b6200015160208301876200011a565b6200016060408301866200011a565b6200016f606083018562000109565b6200017e60808301846200011a565b9695505050505050565b60006200019582620001a6565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b611bfc80620001d66000396000f3fe6080604052600436106100865760003560e01c80638da5cb5b116100595780638da5cb5b14610161578063999b93af1461018c578063a3c79abb146101b7578063beabacc8146101e0578063e3de17031461020957610086565b80630c53c51c1461008b578063171755b1146100bb5780632d0335ab146100e757806360cdb0ff14610124575b600080fd5b6100a560048036038101906100a09190610f91565b610232565b6040516100b29190611602565b60405180910390f35b3480156100c757600080fd5b506100d0610556565b6040516100de929190611646565b60405180910390f35b3480156100f357600080fd5b5061010e60048036038101906101099190610f19565b610610565b60405161011b91906116f6565b60405180910390f35b34801561013057600080fd5b5061014b600480360381019061014691906110cb565b610659565b6040516101589190611556565b60405180910390f35b34801561016d57600080fd5b50610176610748565b60405161018391906114d4565b60405180910390f35b34801561019857600080fd5b506101a161076e565b6040516101ae9190611624565b60405180910390f35b3480156101c357600080fd5b506101de60048036038101906101d99190611020565b6107fc565b005b3480156101ec57600080fd5b5061020760048036038101906102029190610f42565b610844565b005b34801561021557600080fd5b50610230600480360381019061022b919061108a565b6108d7565b005b6060600061023f86610939565b90506000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156102e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102dd90611696565b60405180910390fd5b60006040518060600160405280600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481526020018973ffffffffffffffffffffffffffffffffffffffff168152602001888152509050610367888288888861095d565b6103a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039d906116d6565b60405180910390fd5b6103f860018060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a6c90919063ffffffff16565b600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000803073ffffffffffffffffffffffffffffffffffffffff16898b604051602001610468929190611475565b604051602081830303815290604052604051610484919061145e565b6000604051808303816000865af19150503d80600081146104c1576040519150601f19603f3d011682016040523d82523d6000602084013e6104c6565b606091505b50915091508161050b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050290611676565b60405180910390fd5b7f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b8a338b60405161053e93929190611518565b60405180910390a18094505050505095945050505050565b6060600060028054610567906119a5565b80601f0160208091040260200160405190810160405280929190818152602001828054610593906119a5565b80156105e05780601f106105b5576101008083540402835291602001916105e0565b820191906000526020600020905b8154815290600101906020018083116105c357829003601f168201915b50505050509150600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690509091565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060056000838152602001908152602001600020600001805480602002602001604051908101604052809291908181526020016000905b8282101561073d5783829060005260206000200180546106b0906119a5565b80601f01602080910402602001604051908101604052809291908181526020018280546106dc906119a5565b80156107295780601f106106fe57610100808354040283529160200191610729565b820191906000526020600020905b81548152906001019060200180831161070c57829003601f168201915b505050505081526020019060010190610691565b505050509050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002805461077b906119a5565b80601f01602080910402602001604051908101604052809291908181526020018280546107a7906119a5565b80156107f45780601f106107c9576101008083540402835291602001916107f4565b820191906000526020600020905b8154815290600101906020018083116107d757829003601f168201915b505050505081565b6004600081548092919061080f906119d7565b9190505550806005600060045481526020019081526020016000206000019080519060200190610840929190610bdd565b5050565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b815260040161087f9291906114ef565b602060405180830381600087803b15801561089957600080fd5b505af11580156108ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d19190611061565b50505050565b80600290805190602001906108ed929190610c3d565b506108f6610a82565b600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808251141561095057600060e01b9050610958565b602082015190505b919050565b600080600161097361096e88610b33565b610b9b565b8487876040516000815260200160405260405161099394939291906115bd565b6020604051602081039080840390855afa1580156109b5573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a28906116b6565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161491505095945050505050565b60008183610a7a9190611866565b905092915050565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610b2c57600080368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600080369050905073ffffffffffffffffffffffffffffffffffffffff818301511692505050610b30565b3390505b90565b6000604051806080016040528060438152602001611b84604391398051906020012082600001518360200151846040015180519060200120604051602001610b7e9493929190611578565b604051602081830303815290604052805190602001209050919050565b6000610ba5610bd4565b82604051602001610bb792919061149d565b604051602081830303815290604052805190602001209050919050565b60008054905090565b828054828255906000526020600020908101928215610c2c579160200282015b82811115610c2b578251829080519060200190610c1b929190610c3d565b5091602001919060010190610bfd565b5b509050610c399190610cc3565b5090565b828054610c49906119a5565b90600052602060002090601f016020900481019282610c6b5760008555610cb2565b82601f10610c8457805160ff1916838001178555610cb2565b82800160010185558215610cb2579182015b82811115610cb1578251825591602001919060010190610c96565b5b509050610cbf9190610ce7565b5090565b5b80821115610ce35760008181610cda9190610d04565b50600101610cc4565b5090565b5b80821115610d00576000816000905550600101610ce8565b5090565b508054610d10906119a5565b6000825580601f10610d225750610d41565b601f016020900490600052602060002090810190610d409190610ce7565b5b50565b6000610d57610d5284611742565b611711565b9050808382526020820190508260005b85811015610d975781358501610d7d8882610ec5565b845260208401935060208301925050600181019050610d67565b5050509392505050565b6000610db4610daf8461176e565b611711565b905082815260208101848484011115610dcc57600080fd5b610dd7848285611963565b509392505050565b6000610df2610ded8461179e565b611711565b905082815260208101848484011115610e0a57600080fd5b610e15848285611963565b509392505050565b600081359050610e2c81611af9565b92915050565b600081359050610e4181611b10565b92915050565b600082601f830112610e5857600080fd5b8135610e68848260208601610d44565b91505092915050565b600081519050610e8081611b27565b92915050565b600081359050610e9581611b3e565b92915050565b600082601f830112610eac57600080fd5b8135610ebc848260208601610da1565b91505092915050565b600082601f830112610ed657600080fd5b8135610ee6848260208601610ddf565b91505092915050565b600081359050610efe81611b55565b92915050565b600081359050610f1381611b6c565b92915050565b600060208284031215610f2b57600080fd5b6000610f3984828501610e1d565b91505092915050565b600080600060608486031215610f5757600080fd5b6000610f6586828701610e1d565b9350506020610f7686828701610e32565b9250506040610f8786828701610eef565b9150509250925092565b600080600080600060a08688031215610fa957600080fd5b6000610fb788828901610e1d565b955050602086013567ffffffffffffffff811115610fd457600080fd5b610fe088828901610e9b565b9450506040610ff188828901610e86565b935050606061100288828901610e86565b925050608061101388828901610f04565b9150509295509295909350565b60006020828403121561103257600080fd5b600082013567ffffffffffffffff81111561104c57600080fd5b61105884828501610e47565b91505092915050565b60006020828403121561107357600080fd5b600061108184828501610e71565b91505092915050565b60006020828403121561109c57600080fd5b600082013567ffffffffffffffff8111156110b657600080fd5b6110c284828501610ec5565b91505092915050565b6000602082840312156110dd57600080fd5b60006110eb84828501610eef565b91505092915050565b60006111008383611242565b905092915050565b6111118161192d565b82525050565b611120816118bc565b82525050565b611137611132826118bc565b611a20565b82525050565b6000611148826117de565b611152818561180c565b935083602082028501611164856117ce565b8060005b858110156111a0578484038952815161118185826110f4565b945061118c836117ff565b925060208a01995050600181019050611168565b50829750879550505050505092915050565b6111bb816118ec565b82525050565b6111d26111cd826118ec565b611a32565b82525050565b60006111e3826117e9565b6111ed818561181d565b93506111fd818560208601611972565b61120681611adb565b840191505092915050565b600061121c826117e9565b611226818561182e565b9350611236818560208601611972565b80840191505092915050565b600061124d826117f4565b6112578185611839565b9350611267818560208601611972565b61127081611adb565b840191505092915050565b6000611286826117f4565b611290818561184a565b93506112a0818560208601611972565b6112a981611adb565b840191505092915050565b60006112c1601c8361184a565b91507f46756e6374696f6e2063616c6c206e6f74207375636365737366756c000000006000830152602082019050919050565b6000611301603d8361184a565b91507f66756e6374696f6e5369676e61747572652063616e206e6f74206265206f662060008301527f657865637574654d6574615472616e73616374696f6e206d6574686f640000006020830152604082019050919050565b600061136760028361185b565b91507f19010000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b60006113a760118361184a565b91507f496e76616c6964207369676e61747572650000000000000000000000000000006000830152602082019050919050565b60006113e760218361184a565b91507f5369676e657220616e64207369676e617475726520646f206e6f74206d61746360008301527f68000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b61144981611916565b82525050565b61145881611920565b82525050565b600061146a8284611211565b915081905092915050565b60006114818285611211565b915061148d8284611126565b6014820191508190509392505050565b60006114a88261135a565b91506114b482856111c1565b6020820191506114c482846111c1565b6020820191508190509392505050565b60006020820190506114e96000830184611117565b92915050565b60006040820190506115046000830185611108565b6115116020830184611440565b9392505050565b600060608201905061152d6000830186611117565b61153a6020830185611117565b818103604083015261154c81846111d8565b9050949350505050565b60006020820190508181036000830152611570818461113d565b905092915050565b600060808201905061158d60008301876111b2565b61159a6020830186611440565b6115a76040830185611117565b6115b460608301846111b2565b95945050505050565b60006080820190506115d260008301876111b2565b6115df602083018661144f565b6115ec60408301856111b2565b6115f960608301846111b2565b95945050505050565b6000602082019050818103600083015261161c81846111d8565b905092915050565b6000602082019050818103600083015261163e818461127b565b905092915050565b60006040820190508181036000830152611660818561127b565b905061166f6020830184611117565b9392505050565b6000602082019050818103600083015261168f816112b4565b9050919050565b600060208201905081810360008301526116af816112f4565b9050919050565b600060208201905081810360008301526116cf8161139a565b9050919050565b600060208201905081810360008301526116ef816113da565b9050919050565b600060208201905061170b6000830184611440565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561173857611737611aac565b5b8060405250919050565b600067ffffffffffffffff82111561175d5761175c611aac565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561178957611788611aac565b5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156117b9576117b8611aac565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061187182611916565b915061187c83611916565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156118b1576118b0611a4e565b5b828201905092915050565b60006118c7826118f6565b9050919050565b60006118d9826118f6565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006119388261193f565b9050919050565b600061194a82611951565b9050919050565b600061195c826118f6565b9050919050565b82818337600083830152505050565b60005b83811015611990578082015181840152602081019050611975565b8381111561199f576000848401525b50505050565b600060028204905060018216806119bd57607f821691505b602082108114156119d1576119d0611a7d565b5b50919050565b60006119e282611916565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611a1557611a14611a4e565b5b600182019050919050565b6000611a2b82611a3c565b9050919050565b6000819050919050565b6000611a4782611aec565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b611b02816118bc565b8114611b0d57600080fd5b50565b611b19816118ce565b8114611b2457600080fd5b50565b611b30816118e0565b8114611b3b57600080fd5b50565b611b47816118ec565b8114611b5257600080fd5b50565b611b5e81611916565b8114611b6957600080fd5b50565b611b7581611920565b8114611b8057600080fd5b5056fe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529a2646970667358221220f544238876124ad2ae2b6ae4e4b59922c1ea111e08209f1cfbd37a4d7491ef9064736f6c63430008000033454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c6164647265737320766572696679696e67436f6e74726163742c627974657333322073616c7429",
            "deployedBytecode": "0x6080604052600436106100865760003560e01c80638da5cb5b116100595780638da5cb5b14610161578063999b93af1461018c578063a3c79abb146101b7578063beabacc8146101e0578063e3de17031461020957610086565b80630c53c51c1461008b578063171755b1146100bb5780632d0335ab146100e757806360cdb0ff14610124575b600080fd5b6100a560048036038101906100a09190610f91565b610232565b6040516100b29190611602565b60405180910390f35b3480156100c757600080fd5b506100d0610556565b6040516100de929190611646565b60405180910390f35b3480156100f357600080fd5b5061010e60048036038101906101099190610f19565b610610565b60405161011b91906116f6565b60405180910390f35b34801561013057600080fd5b5061014b600480360381019061014691906110cb565b610659565b6040516101589190611556565b60405180910390f35b34801561016d57600080fd5b50610176610748565b60405161018391906114d4565b60405180910390f35b34801561019857600080fd5b506101a161076e565b6040516101ae9190611624565b60405180910390f35b3480156101c357600080fd5b506101de60048036038101906101d99190611020565b6107fc565b005b3480156101ec57600080fd5b5061020760048036038101906102029190610f42565b610844565b005b34801561021557600080fd5b50610230600480360381019061022b919061108a565b6108d7565b005b6060600061023f86610939565b90506000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614156102e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102dd90611696565b60405180910390fd5b60006040518060600160405280600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481526020018973ffffffffffffffffffffffffffffffffffffffff168152602001888152509050610367888288888861095d565b6103a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039d906116d6565b60405180910390fd5b6103f860018060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a6c90919063ffffffff16565b600160008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000803073ffffffffffffffffffffffffffffffffffffffff16898b604051602001610468929190611475565b604051602081830303815290604052604051610484919061145e565b6000604051808303816000865af19150503d80600081146104c1576040519150601f19603f3d011682016040523d82523d6000602084013e6104c6565b606091505b50915091508161050b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050290611676565b60405180910390fd5b7f5845892132946850460bff5a0083f71031bc5bf9aadcd40f1de79423eac9b10b8a338b60405161053e93929190611518565b60405180910390a18094505050505095945050505050565b6060600060028054610567906119a5565b80601f0160208091040260200160405190810160405280929190818152602001828054610593906119a5565b80156105e05780601f106105b5576101008083540402835291602001916105e0565b820191906000526020600020905b8154815290600101906020018083116105c357829003601f168201915b50505050509150600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690509091565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060056000838152602001908152602001600020600001805480602002602001604051908101604052809291908181526020016000905b8282101561073d5783829060005260206000200180546106b0906119a5565b80601f01602080910402602001604051908101604052809291908181526020018280546106dc906119a5565b80156107295780601f106106fe57610100808354040283529160200191610729565b820191906000526020600020905b81548152906001019060200180831161070c57829003601f168201915b505050505081526020019060010190610691565b505050509050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002805461077b906119a5565b80601f01602080910402602001604051908101604052809291908181526020018280546107a7906119a5565b80156107f45780601f106107c9576101008083540402835291602001916107f4565b820191906000526020600020905b8154815290600101906020018083116107d757829003601f168201915b505050505081565b6004600081548092919061080f906119d7565b9190505550806005600060045481526020019081526020016000206000019080519060200190610840929190610bdd565b5050565b8273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b815260040161087f9291906114ef565b602060405180830381600087803b15801561089957600080fd5b505af11580156108ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d19190611061565b50505050565b80600290805190602001906108ed929190610c3d565b506108f6610a82565b600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808251141561095057600060e01b9050610958565b602082015190505b919050565b600080600161097361096e88610b33565b610b9b565b8487876040516000815260200160405260405161099394939291906115bd565b6020604051602081039080840390855afa1580156109b5573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a28906116b6565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161491505095945050505050565b60008183610a7a9190611866565b905092915050565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610b2c57600080368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600080369050905073ffffffffffffffffffffffffffffffffffffffff818301511692505050610b30565b3390505b90565b6000604051806080016040528060438152602001611b84604391398051906020012082600001518360200151846040015180519060200120604051602001610b7e9493929190611578565b604051602081830303815290604052805190602001209050919050565b6000610ba5610bd4565b82604051602001610bb792919061149d565b604051602081830303815290604052805190602001209050919050565b60008054905090565b828054828255906000526020600020908101928215610c2c579160200282015b82811115610c2b578251829080519060200190610c1b929190610c3d565b5091602001919060010190610bfd565b5b509050610c399190610cc3565b5090565b828054610c49906119a5565b90600052602060002090601f016020900481019282610c6b5760008555610cb2565b82601f10610c8457805160ff1916838001178555610cb2565b82800160010185558215610cb2579182015b82811115610cb1578251825591602001919060010190610c96565b5b509050610cbf9190610ce7565b5090565b5b80821115610ce35760008181610cda9190610d04565b50600101610cc4565b5090565b5b80821115610d00576000816000905550600101610ce8565b5090565b508054610d10906119a5565b6000825580601f10610d225750610d41565b601f016020900490600052602060002090810190610d409190610ce7565b5b50565b6000610d57610d5284611742565b611711565b9050808382526020820190508260005b85811015610d975781358501610d7d8882610ec5565b845260208401935060208301925050600181019050610d67565b5050509392505050565b6000610db4610daf8461176e565b611711565b905082815260208101848484011115610dcc57600080fd5b610dd7848285611963565b509392505050565b6000610df2610ded8461179e565b611711565b905082815260208101848484011115610e0a57600080fd5b610e15848285611963565b509392505050565b600081359050610e2c81611af9565b92915050565b600081359050610e4181611b10565b92915050565b600082601f830112610e5857600080fd5b8135610e68848260208601610d44565b91505092915050565b600081519050610e8081611b27565b92915050565b600081359050610e9581611b3e565b92915050565b600082601f830112610eac57600080fd5b8135610ebc848260208601610da1565b91505092915050565b600082601f830112610ed657600080fd5b8135610ee6848260208601610ddf565b91505092915050565b600081359050610efe81611b55565b92915050565b600081359050610f1381611b6c565b92915050565b600060208284031215610f2b57600080fd5b6000610f3984828501610e1d565b91505092915050565b600080600060608486031215610f5757600080fd5b6000610f6586828701610e1d565b9350506020610f7686828701610e32565b9250506040610f8786828701610eef565b9150509250925092565b600080600080600060a08688031215610fa957600080fd5b6000610fb788828901610e1d565b955050602086013567ffffffffffffffff811115610fd457600080fd5b610fe088828901610e9b565b9450506040610ff188828901610e86565b935050606061100288828901610e86565b925050608061101388828901610f04565b9150509295509295909350565b60006020828403121561103257600080fd5b600082013567ffffffffffffffff81111561104c57600080fd5b61105884828501610e47565b91505092915050565b60006020828403121561107357600080fd5b600061108184828501610e71565b91505092915050565b60006020828403121561109c57600080fd5b600082013567ffffffffffffffff8111156110b657600080fd5b6110c284828501610ec5565b91505092915050565b6000602082840312156110dd57600080fd5b60006110eb84828501610eef565b91505092915050565b60006111008383611242565b905092915050565b6111118161192d565b82525050565b611120816118bc565b82525050565b611137611132826118bc565b611a20565b82525050565b6000611148826117de565b611152818561180c565b935083602082028501611164856117ce565b8060005b858110156111a0578484038952815161118185826110f4565b945061118c836117ff565b925060208a01995050600181019050611168565b50829750879550505050505092915050565b6111bb816118ec565b82525050565b6111d26111cd826118ec565b611a32565b82525050565b60006111e3826117e9565b6111ed818561181d565b93506111fd818560208601611972565b61120681611adb565b840191505092915050565b600061121c826117e9565b611226818561182e565b9350611236818560208601611972565b80840191505092915050565b600061124d826117f4565b6112578185611839565b9350611267818560208601611972565b61127081611adb565b840191505092915050565b6000611286826117f4565b611290818561184a565b93506112a0818560208601611972565b6112a981611adb565b840191505092915050565b60006112c1601c8361184a565b91507f46756e6374696f6e2063616c6c206e6f74207375636365737366756c000000006000830152602082019050919050565b6000611301603d8361184a565b91507f66756e6374696f6e5369676e61747572652063616e206e6f74206265206f662060008301527f657865637574654d6574615472616e73616374696f6e206d6574686f640000006020830152604082019050919050565b600061136760028361185b565b91507f19010000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b60006113a760118361184a565b91507f496e76616c6964207369676e61747572650000000000000000000000000000006000830152602082019050919050565b60006113e760218361184a565b91507f5369676e657220616e64207369676e617475726520646f206e6f74206d61746360008301527f68000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b61144981611916565b82525050565b61145881611920565b82525050565b600061146a8284611211565b915081905092915050565b60006114818285611211565b915061148d8284611126565b6014820191508190509392505050565b60006114a88261135a565b91506114b482856111c1565b6020820191506114c482846111c1565b6020820191508190509392505050565b60006020820190506114e96000830184611117565b92915050565b60006040820190506115046000830185611108565b6115116020830184611440565b9392505050565b600060608201905061152d6000830186611117565b61153a6020830185611117565b818103604083015261154c81846111d8565b9050949350505050565b60006020820190508181036000830152611570818461113d565b905092915050565b600060808201905061158d60008301876111b2565b61159a6020830186611440565b6115a76040830185611117565b6115b460608301846111b2565b95945050505050565b60006080820190506115d260008301876111b2565b6115df602083018661144f565b6115ec60408301856111b2565b6115f960608301846111b2565b95945050505050565b6000602082019050818103600083015261161c81846111d8565b905092915050565b6000602082019050818103600083015261163e818461127b565b905092915050565b60006040820190508181036000830152611660818561127b565b905061166f6020830184611117565b9392505050565b6000602082019050818103600083015261168f816112b4565b9050919050565b600060208201905081810360008301526116af816112f4565b9050919050565b600060208201905081810360008301526116cf8161139a565b9050919050565b600060208201905081810360008301526116ef816113da565b9050919050565b600060208201905061170b6000830184611440565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561173857611737611aac565b5b8060405250919050565b600067ffffffffffffffff82111561175d5761175c611aac565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561178957611788611aac565b5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156117b9576117b8611aac565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061187182611916565b915061187c83611916565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156118b1576118b0611a4e565b5b828201905092915050565b60006118c7826118f6565b9050919050565b60006118d9826118f6565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006119388261193f565b9050919050565b600061194a82611951565b9050919050565b600061195c826118f6565b9050919050565b82818337600083830152505050565b60005b83811015611990578082015181840152602081019050611975565b8381111561199f576000848401525b50505050565b600060028204905060018216806119bd57607f821691505b602082108114156119d1576119d0611a7d565b5b50919050565b60006119e282611916565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611a1557611a14611a4e565b5b600182019050919050565b6000611a2b82611a3c565b9050919050565b6000819050919050565b6000611a4782611aec565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b611b02816118bc565b8114611b0d57600080fd5b50565b611b19816118ce565b8114611b2457600080fd5b50565b611b30816118e0565b8114611b3b57600080fd5b50565b611b47816118ec565b8114611b5257600080fd5b50565b611b5e81611916565b8114611b6957600080fd5b50565b611b7581611920565b8114611b8057600080fd5b5056fe4d6574615472616e73616374696f6e2875696e74323536206e6f6e63652c616464726573732066726f6d2c62797465732066756e6374696f6e5369676e617475726529a2646970667358221220f544238876124ad2ae2b6ae4e4b59922c1ea111e08209f1cfbd37a4d7491ef9064736f6c63430008000033",
            "linkReferences": {},
            "deployedLinkReferences": {}
        }

    },
    apiKey: {
        test: "cNWqZcoBb.4e4c0990-26a8-4a45-b98e-08101f754119",
        // prod: "8nvA_lM_Q.0424c54e-b4b2-4550-98c5-8b437d3118a9", //kovan
        prod: "qF25bAMYU.6e3528cd-fa0f-4a4d-a318-2aa9f44baafc" //mumbai
    }
}

//this changes for all EIP712Sign variations of custom approach
const domainType = [
    { name: "name", type: "string" },
    { name: "version", type: "string" },
    { name: "verifyingContract", type: "address" },
    { name: "salt", type: "bytes32" },
];

const metaTransactionType = [
    { name: "nonce", type: "uint256" },
    { name: "from", type: "address" },
    { name: "functionSignature", type: "bytes" }
];

let domainData = {
    name: "TestContract",
    version: "1",
    verifyingContract: config.contract.address,
    // salt: ethers.utils.hexZeroPad((ethers.BigNumber.from(42)).toHexString(), 32), //kovan
    salt: ethers.utils.hexZeroPad((ethers.BigNumber.from(80001)).toHexString(), 32), //mumbai
};

let ethersProvider,walletProvider, walletSigner;
let contract, contractInterface;

const useStyles = makeStyles((theme) => ({
    root: {
        '& > * + *': {
            marginLeft: theme.spacing(2),
        },
    },
    link: {
        marginLeft: "5px"
    },
    backdrop: {
        zIndex: theme.zIndex.drawer + 1,
        color: '#fff',
        opacity: '.85!important',
        background: '#000'
    },
}));

let biconomy;

function TransferERC20() {
    const classes = useStyles();
    const preventDefault = (event) => event.preventDefault();
    const [backdropOpen, setBackdropOpen] = React.useState(true);
    const [loadingMessage, setLoadingMessage] = React.useState(" Loading Application ...");
    const [quote, setQuote] = useState("This is a default quote");
    const [owner, setOwner] = useState("Default Owner Address");
    const [newQuote, setNewQuote] = useState("");
    const [selectedAddress, setSelectedAddress] = useState("");
    const [metaTxEnabled, setMetaTxEnabled] = useState(true);
    const [transactionHash, setTransactionHash] = useState("");

    const handleClose = () => {
        setBackdropOpen(false);
    };

    const handleToggle = () => {
        setBackdropOpen(!backdropOpen);
    };


    useEffect(() => {
        async function init() {
            if (
                typeof window.ethereum !== "undefined" &&
                window.ethereum.isMetaMask
            ) {
                // Ethereum user detected. You can now use the provider.
                const provider = window["ethereum"];
                await provider.enable();
                setLoadingMessage("Initializing Biconomy ...");
                // We're creating biconomy provider linked to your network of choice where your contract is deployed
                // biconomy = new Biconomy(new ethers.providers.JsonRpcProvider("https://kovan.infura.io/v3/d126f392798444609246423b06116c77"), //kovan
                biconomy = new Biconomy(new ethers.providers.JsonRpcProvider("https://matic-mumbai.chainstacklabs.com"), //mumbai
                    { apiKey: config.apiKey.prod, debug: true });

                /*
                  This provider is linked to your wallet.
                  If needed, substitute your wallet solution in place of window.ethereum
                */
                ethersProvider = new ethers.providers.Web3Provider(biconomy);
                walletProvider = new ethers.providers.Web3Provider(window.ethereum);
                walletSigner = walletProvider.getSigner();

                let userAddress = await walletSigner.getAddress()
                setSelectedAddress(userAddress);

                biconomy.onEvent(biconomy.READY, async () => {

                    // Initialize your dapp here like getting user accounts etc
                    contract = new ethers.Contract(
                        config.contract.address,
                        config.contract.abi.abi,
                        biconomy.getSignerByAddress(userAddress)
                    );

                    contractInterface = new ethers.utils.Interface(config.contract.abi.abi);
                    getQuoteFromNetwork();
                }).onEvent(biconomy.ERROR, (error, message) => {
                    // Handle error while initializing mexa
                    console.log(message);
                    console.log(error);
                });
            } else {
                showErrorMessage("Metamask not installed");
            }
        }
        init();
    }, []);

    const onQuoteChange = event => {
        setNewQuote(event.target.value);
    };

    const onSubmitWithEIP712Sign = async event => {
        if (newQuote != "" && contract) {
            setTransactionHash("");
            console.log("metatxnenabed",metaTxEnabled);
            if (metaTxEnabled) {
                showInfoMessage(`Getting user signature`);
                let userAddress = selectedAddress;
                let nonce = await contract.getNonce(userAddress);
                let functionSignature = contractInterface.encodeFunctionData("createOrder", [["btc"]]);
                let message = {};
                message.nonce = parseInt(nonce);
                message.from = userAddress;
                message.functionSignature = functionSignature;

                const dataToSign = JSON.stringify({
                    types: {
                        EIP712Domain: domainType,
                        MetaTransaction: metaTransactionType
                    },
                    domain: domainData,
                    primaryType: "MetaTransaction",
                    message: message
                });

                // Its important to use eth_signTypedData_v3 and not v4 to get EIP712 signature because we have used salt in domain data
                // instead of chainId
                let signature = await walletProvider.send("eth_signTypedData_v3", [userAddress, dataToSign])
                let { r, s, v } = getSignatureParameters(signature);
                sendSignedTransaction(userAddress, functionSignature, r, s, v);
            } else {
                console.log("Sending normal transaction");
                let tx = await contract.create(newQuote);
                console.log("Transaction hash : ", tx.hash);
                showInfoMessage(`Transaction sent by relayer with hash ${tx.hash}`);
                let confirmation = await tx.wait();
                console.log(confirmation);
                setTransactionHash(tx.hash);

                showSuccessMessage("Transaction confirmed on chain");
                getQuoteFromNetwork();
            }
        } else {
            showErrorMessage("Please enter the quote");
        }
    };

    const onSubmitWithPrivateKey = async (event) => {
        if (newQuote != "" && contract) {
            setTransactionHash("");

            try {
                if (metaTxEnabled) {
                    showInfoMessage(`Getting user signature`);
                    let privateKey =
                        "2ef295b86aa9d40ff8835a9fe852942ccea0b7c757fad5602dfa429bcdaea910";
                    let wallet = new ethers.Wallet(privateKey);
                    let userAddress = "0xE1E763551A85F04B4687f0035885E7F710A46aA6";
                    let nonce = await contract.getNonce(userAddress);
                    let functionSignature = contractInterface.encodeFunctionData(
                        "createOrder",
                        [["eth"]]
                    );
                    let message = {};
                    message.nonce = parseInt(nonce);
                    message.from = userAddress;
                    message.functionSignature = functionSignature;
                    console.log("message", message);

                    // NOTE: DO NOT use JSON.stringify on dataToSign object
                    const dataToSign = {
                        types: {
                            EIP712Domain: domainType,
                            MetaTransaction: metaTransactionType,
                        },
                        domain: domainData,
                        primaryType: "MetaTransaction",
                        message: message,
                    };

                    // Its important to use eth_signTypedData_v3 and not v4 to get EIP712 signature because we have used salt in domain data
                    // instead of chainId
                    const signature = sigUtil.signTypedMessage(
                        new Buffer.from(privateKey, "hex"),
                        { data: dataToSign },
                        "V3"
                    );
                    let { r, s, v } = getSignatureParameters(signature);
                    let rawTx, tx;
                    rawTx = {
                        to: config.contract.address,
                        data: contractInterface.encodeFunctionData(
                            "executeMetaTransaction",
                            [userAddress, functionSignature, r, s, v]
                        ),
                        from: userAddress,
                    };
                    tx = await wallet.signTransaction(rawTx);

                    let transactionHash;
                    try {
                        let receipt = await ethersProvider.sendTransaction(tx);
                        console.log(receipt);
                    } catch (error) {
                        // Ethers check the hash from user's signed tx and hash returned from Biconomy
                        // Both hash are expected to be different as biconomy send the transaction from its relayers
                        if (error.returnedHash && error.expectedHash) {
                            console.log("Transaction hash : ", error.returnedHash);
                            transactionHash = error.returnedHash;
                        } else {
                            console.log(error);
                            showErrorMessage("Error while sending transaction");
                        }
                    }

                    if (transactionHash) {
                        showInfoMessage(
                            `Transaction sent by relayer with hash ${transactionHash}`
                        );
                        let receipt = await ethersProvider.waitForTransaction(
                            transactionHash
                        );
                        console.log(receipt);
                        showSuccessMessage("Transaction confirmed on chain");
                        getQuoteFromNetwork();
                    } else {
                        showErrorMessage("Could not get transaction hash");
                    }
                } else {
                    console.log("Sending normal transaction");
                    let tx = await contract.setQuote(newQuote);
                    console.log("Transaction hash : ", tx.hash);
                    showInfoMessage(`Transaction sent by relayer with hash ${tx.hash}`);
                    let confirmation = await tx.wait();
                    console.log(confirmation);
                    setTransactionHash(tx.hash);

                    showSuccessMessage("Transaction confirmed on chain");
                    getQuoteFromNetwork();
                }
            } catch (error) {
                console.log(error);
                handleClose();
            }
        } else {
            showErrorMessage("Please enter the quote");
        }
    };

    const getSignatureParameters = signature => {
        if (!ethers.utils.isHexString(signature)) {
            throw new Error(
                'Given value "'.concat(signature, '" is not a valid hex string.')
            );
        }
        var r = signature.slice(0, 66);
        var s = "0x".concat(signature.slice(66, 130));
        var v = "0x".concat(signature.slice(130, 132));
        v = ethers.BigNumber.from(v).toNumber();
        if (![27, 28].includes(v)) v += 27;
        return {
            r: r,
            s: s,
            v: v
        };
    };

    const getQuoteFromNetwork = async () => {
        setLoadingMessage("Getting Quote from contact ...");
        let result = await contract.getQuote();
        if (
            result &&
            result.currentQuote != undefined &&
            result.currentOwner != undefined
        ) {
            if (result.currentQuote == "") {
                showErrorMessage("No quotes set on blockchain yet");
            } else {
                console.log("result current quote", result.currentQuote, result.currentOwner);
                setQuote(result.currentQuote);
                setOwner(result.currentOwner);
            }
        } else {
            showErrorMessage("Not able to get quote information from Network");
        }
        handleClose();
    };

    const showErrorMessage = message => {
        NotificationManager.error(message, "Error", 5000);
    };

    const showSuccessMessage = message => {
        NotificationManager.success(message, "Message", 3000);
    };

    const showInfoMessage = message => {
        NotificationManager.info(message, "Info", 3000);
    };

    const sendSignedTransaction = async (userAddress, functionData, r, s, v) => {
        try {
            showInfoMessage(`Sending transaction via Biconomy`);
            let tx = await contract.executeMetaTransaction(userAddress, functionData, r, s, v);
            console.log(tx)
            showInfoMessage(`Transaction sent. Waiting for confirmation ..`)
            await tx.wait(1);
            console.log("Transaction hash : ", tx.hash);
            //let confirmation = await tx.wait();
            console.log(tx);
            setTransactionHash(tx.hash);

            showSuccessMessage("Transaction confirmed on chain");
            getQuoteFromNetwork();

        } catch (error) {
            console.log(error);
            handleClose();
        }
    };

    return (
        <div className="App">
            <section className="top-row">
                <div className="top-row-item">
                    <span className="label">Library </span>
                    <span className="label-value">ethers.js</span>
                </div>
                <div className="top-row-item">
                    <span className="label">Meta Transaction</span>
                    <span className="label-value">Custom Approach</span>
                </div>
                <div className="top-row-item">
                    <span className="label">Signature Type</span>
                    <span className="label-value">EIP712 Signature</span>
                </div>
            </section>
            <section className="main">
                <div className="mb-wrap mb-style-2">
                    <blockquote cite="http://www.gutenberg.org/ebboks/11">
                        <p>{quote}</p>
                    </blockquote>
                </div>

                <div className="mb-attribution">
                    <p className="mb-author">{owner}</p>
                    {selectedAddress.toLowerCase() === owner.toLowerCase() && (
                        <cite className="owner">You are the owner of the quote</cite>
                    )}
                    {selectedAddress.toLowerCase() !== owner.toLowerCase() && (
                        <cite>You are not the owner of the quote</cite>
                    )}
                </div>
            </section>
            <section>
                {transactionHash !== "" && <Box className={classes.root} mt={2} p={2}>
                    <Typography>
                        Check your transaction hash
                        <Link href={`https://mumbai.polygonscan.com/tx/${transactionHash}`} target="_blank"
                              className={classes.link}>
                            here
                        </Link>
                    </Typography>
                </Box>}
            </section>
            <section>
                <div className="submit-container">
                    <div className="submit-row">
                        <input
                            type="text"
                            placeholder="Enter your quote"
                            onChange={onQuoteChange}
                            value={newQuote}
                        />
                        <Button variant="contained" color="primary" onClick={onSubmitWithEIP712Sign} style={{ marginLeft: "10px" }}>
                            Submit
                        </Button>

                        <Button variant="contained" color="secondary" onClick={onSubmitWithPrivateKey} style={{ marginLeft: "10px" }}>
                            Submit (Private Key)
                        </Button>
                    </div>
                </div>
            </section>
            <Backdrop className={classes.backdrop} open={backdropOpen} onClick={handleClose}>
                <CircularProgress color="inherit" />
                <div style={{ paddingLeft: "10px" }}>{loadingMessage}</div>
            </Backdrop>
            <NotificationContainer />
        </div>
    );
}

export default TransferERC20;